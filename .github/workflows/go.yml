name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_windows:
    name: Build for Windows
    runs-on: [windows-latest]
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
      - name: Build jsontool
        run: go build -v .
        working-directory: cmd/jsontool
      - name: Build editor
        run: go build -v .
        working-directory: editor
      - name: Prepare artifact
        run: |
          mkdir bin
          ls cmd/jsontool
          ls cmd/editor
          #cp cmd/jsontool/jsontool.exe bin/jsontool.exe
          #cp cmd/editor/editor.exe bin/editor.exe
          #cp cmd/editor/editor.exe.manifest bin/editor.exe.manifest    
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: release_windows
          path: bin
  publish_windows:
    if: github.event != 'pull_request'
    needs: [build_windows]
    name: Publish Windows release
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/download-artifact@v1
        name: Download Windows artifact
        with:
          name: release_windows
          path: release_windows
      - name: Make zip archives
        run: zip -r release_windows.zip release_windows
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: _Generated by GitHub Actions_
          draft: true
          prerelease: false
      - name: Upload Windows Asset
        id: upload-windows-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release_windows.zip
          asset_name: release_windows.zip
          asset_content_type: application/zip
